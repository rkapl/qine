# Magic

Is sort of QNXs TLS I guess. Its position is up to the loader/kernel/proc, but there
will be always far pointer in the segment 0x78 pointing to MAGIC.

# Early create

Not clear if the process start in SLIB or calls into SLIB. Watcom shows it starting in SLIB, but there is code
in CRT pointing to the opposite.

Stack upon entry to SLIB looks like this:
    MAIN
    MAIN SEG
    ARGC
    ARGV1
    ARGV2 ...
    NULL
    ENV1
    ENV2 ...
    NULL
    PID
    PARENT PID
    NID (was 1, guess)
    ??
    Stack top

Most of the allocation in QNX is done using a SBRK style algorithm, so the values should be placed
after BSS.

The registers have following meaning on loader <-> slib and slib <-> program interface:
EBX = curbrk (end of sbrk memory)
ECX = free memory after curbrk (basically data segmen end - curbrk)
EDX = stack low

# Calling conventions

Most of things use watcall.
Quick watcall register callin convention info: All registers are preserved, except return (EAX).

Arguments are placed in EAX, EDX, EBX, ECX (order in the linked source is probably wrong) and then stack.
Caller cleans up the stack.

But beware. If the function is variadic, like `open(const char* path, ...)` it will use watcom stack 
based calling convention. This convention seems +- identical to cdecl.

Source: http://jdebp.info/FGA/function-calling-conventions.html

# Open

Neutrino description probably applies:
https://www.qnx.com/developers/docs/6.3.2/neutrino/prog/resmgr.html

1) query proc, get the relative name
2) allocate FD
3) contact iomgr

https://github.com/sam-github/vf
https://github.com/sam-github/vf/blob/f8b4e1b0676b54825b740e1e9af8b11b08aa7337/vf_mgr.h#L79

