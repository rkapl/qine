# Magic

Is sort of QNXs TLS I guess. Its position is up to the loader/kernel/proc, but there
will be always far pointer in the segment 0x78 pointing to MAGIC.

# Early create

The process actually start in SLIB. Not clear how this is done? SLIB checks for a special 'SLIB' signature
in the program code and if it does not see it, it disables itself. Some code in CRT seems to suggest that the startup
sequence used to be in reverse and SLIB was called into.

Stack upon entry to SLIB looks like this:
    MAIN
    MAIN SEG
    ARGC
    ARGV1
    ARGV2 ...
    NULL
    ENV1
    ENV2 ...
    NULL
    PID
    PARENT PID
    NID (was 1, guess)
    ??
    Stack top

Most of the allocation in QNX is done using a SBRK style algorithm, so the values should be placed
after BSS.

The registers have following meaning on loader <-> slib and slib <-> program interface:
EBX = curbrk (end of sbrk memory)
ECX = free memory after curbrk (basically data segment end - curbrk)
EDX = stack low

Not used by CRT/Slib code:
EBP = pid
EDI = pointer to spawn message

The spawn message itself is pushed to the heap.

# 16-bit Early Startup

There is no Slib (at least for vedit).

Registers are the same as 32-bit, but the CRT uses the spawn EDI pointer.

However, there seems to be nothing on the stack. Magic and the spawn message follow immediately.

# Calling conventions

Most of things use watcall.
Quick watcall register calling convention info: All registers are preserved, except return (EAX).

Arguments are placed in EAX, EDX, EBX, ECX (order in the linked source is probably wrong) and then stack.
Caller cleans up the stack.

But beware. If the function is variadic, like `open(const char* path, ...)` it will use watcom stack 
based calling convention. This convention seems +- identical to cdecl.


Source: http://jdebp.info/FGA/function-calling-conventions.html

# Open

Neutrino description probably applies:
https://www.qnx.com/developers/docs/6.3.2/neutrino/prog/resmgr.html

1) query proc, get the relative name
2) allocate FD
3) contact iomgr

https://github.com/sam-github/vf
https://github.com/sam-github/vf/blob/f8b4e1b0676b54825b740e1e9af8b11b08aa7337/vf_mgr.h#L79

# Misc
http://cynosurecomputer.ca/dqnet.htm
