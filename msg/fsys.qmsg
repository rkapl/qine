include common : open status;

msg unlink {
    type: 0x203;

    request {
        args: open;
        path: path;
    }
    reply {
        status: u16;
    }
}

msg mkspecial {
    type: 0x0202;

    request {
        open: open;
        path: path;
        target: path;
    }
    reply status;
}

msg link {
    type: 0x0204;
    # links an existing handle to new_path
    request {
        arg: open;
        new_path: path;
    }
    reply status;
}

msg disk_entry {
    type: 0x209;
    request {
        fd: fd;
    }

    reply {
        status: u16;
        padd: u16;

        blk_offset: u32;
        num_sectors: u32;
        disk_sectors: u32;
        cylinders: u16;
        heads: u16;
        track_sectors: u16;

        disk_type: u8;
        disk_drv: u8;
        padd: u32;
        padd: u32;
        padd: u32;
        drive_name: char[12];
    }
}

msg sync {
    type: 0x20A;
    request {}
    reply status;
}


msg trunc {
    type: 0x210;   
    request {
        fd: fd;
        offset: i32;
        whence: u16;
        padd: u16;
    }
    reply {
        status: u16;
        padd: u16;
        offset: u32;
    }
}

msg readlink {
    type: 0x0216;
    request {
        arg: open;
        path: path;
    }
    reply {
        status: u16;
        padd: u16;
        path: path;
    }
}

msg fsync {
    type: 0x218;
    request {
        fd: fd;
        flags: u32;
    }
    reply status;
}

msg fdinfo {
    type: 0x021A;
    request {
        pid: pid;
        padd: u16;
        fd: u16;
        padd: u32;
    }
    reply {
        status: u16;
        pid: pid;
        padd: u16;
        fd: u16;
        padd: u32;
        offset: u32;
        fsize: u32;
        fflags: u16;
        share: u16;
        path: path;
    }
}

msg get_mount {
    type: 0x20d;
    request {
        open: open;
        path: path;
    }
    reply {
        status: u16;
        padd: u16;
        path: path;
    }
}

msg disk_space {
    type: 0x20e;
    request {
        fd: fd;
        padd: u32;
    }

    reply {
        status: u16;
        padd: u16;
        free_blocks: u32;
        total_blocks: u32;
    }
}

msg pipe {
    type: 0x20f;

    request {
        unit: u16;
        fd_in: fd;
        fd_out: fd;
    }
    reply {
        status: u16;
    }
}