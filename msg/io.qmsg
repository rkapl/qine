include common : open status;

msg io_open {
     type: 0x101;

     request {
        open: open;
        file: path;
     }
     reply status;
}

msg close {
     type: 0x102;

     request {
          fd: fd;
          padd: u32;
     }
     reply status;
}

msg handle {
     type: 0x109;

     request {
        open: open;
        file: path;
     }
     reply status;
}

msg rename {
     type: 0x106;
     request {
          open: open;
          from: path;
          to: path;
     }
     reply status;
}

msg chdir {
     type: 0x110;
     request open;
     reply status;
}

msg read {
   type: 0x103;

   request {
        fd: fd;
        nbytes: u16 hex;
        zero: u16; 
   }
   reply {
        status: u16;
        nbytes: u16 hex;
        zero: u32;
   }
}

msg write {
   type: 0x104;

   request {
        fd: fd;
        nbytes: u16 hex;
        zero: u16; 
   }
   reply {
        status: u16;
        nbytes: u16 hex;
        zero: u16;
   }
}

msg lseek {
    type: 0x105;

    request {
        fd: fd;
        offset: i32;
        whence: u16;
        zero: u16;
    }
    reply {
        status: u16;
        zero: u16;
        offset: u32;
    }
}

struct stat {
     ino: u32;
     dev: u32;
     size: i32;
     rdev: u32;

     # see comments in original header
     userland_uid: u32;
     userland_gid: u32;    

     ftime: time;
     mtime: time;
     atime: time;
     ctime: time;
     padd: u16;

     mode: u16 oct;
     uid: u16;
     gid: u16;
     nlink: u16;

     padd: u32;
     padd: u8;
     status: u8;
}

msg stat {
     type: 0x115;

     request {
          args: open;
          path: path;
     }
     reply {
          status: u16;
          padd: u16;
          stat: stat;
     }
}

msg fstat {
     type: 0x10a;

     request {
          fd: u16;
          zero: u32;
     }

     reply {
          status: u16;
          padd: u16;
          stat: stat;
     }
}

msg readdir {
     type: 0x112;

     request {
          fd: u16;
          ndirs: u8;
          padd: u8;
          padd: u8;
          padd: u8;
     }

     reply {
          status: u16;
          ndirs: u8;
          padd: u8;
          padd: u32;
          # dirents follow
     }
}

msg rewinddir {
     type: 0x113;

     request {
          fd: u16;
     }
     reply status;
}

msg fcntl_flags {
     type: 0x010E;
     request {
          fd: u16;
          mask: u16;
          bits: u16;
     }
     reply {
          status: u16;
          flags: u16;
     }
}

msg dup {
     type: 0x108;
     request {
          src_fd: u16;
          src_pid: pid;
          padd: u16;
          dst_fd: u16;
          padd: u16;
     }
     reply status;
}

msg fpathconf {
     type: 0x107;
     request {
          fd: u16;
          idx: u16;
     }
     reply {
          status: u16;
          padd: u16;
          value: i16;
     }
}

msg chmod {
     type: 0x010B;
     request {
          fd: u16;
          mode: u16;
     }
     reply status;
}

msg chown {
     type: 0x010C;
     request {
          fd: u16;
          gid: u16;
          uid: u16;
     }
     reply status;
}

msg utime {
     type: 0x010D;

     request {
          fd: u16;
          actime: time;
          mod: time;
          cur_flag: u16;
          zero: u16;
     }

     reply status;
}

msg ioctl {
     type: 0x0114;

     request {
          fd: fd;
          request: u16 hex;
          nbytes: u16;
          padd: u32;
     }
     reply {
          status: u16;
          ret_val: u16;
          padd: u32;
     }
}

msg qioctl {
     type: 0x0117;

     request {
          fd: fd;
          request: u16 hex;
          nbytes: u16;
          padd: u32;
     }
     reply {
          status: u16;
          ret_val: u16;
          padd: u32;
          padd: u32;
     }
}

struct lock {
     fd: fd;
     cmd: u16;
     type: u16;
     whence: u16;
     start: i32;
     len: u32;
     pid: pid;
     padd: u16;
}

msg lock {
     type: 0x010F;

     request {
          lock: lock;
     }
     reply {
          status: u16;
          lock: lock;
     }
}