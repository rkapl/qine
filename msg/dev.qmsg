msg tcgetattr {
     type: 0x310;
     request {
          fd: fd;
     }
     reply {
          status: i16;
          state: termios;
     }
}

msg tcsetattr {
     type: 0x311;
     request {
          fd: fd;
          state: termios;
          optional_actions: u16;
     }
     reply {
          status: i16;
     }
}

msg tcgetpgrp {
     type: 0x316;
     request {
          fd: fd;
     }
     reply {
          status: u16;
          pgrp: pid;
          padd: u16;
     }
}

msg tcsetpgrp {
     type: 0x317;

     request {
          fd: fd;
          pgrp: pid;
          padd: u16;
     }
     reply {
          status: u16;
     }
}

struct dev_info {
    tty: i16;
    nid: nid;
    driver_pid: pid;
    padd: u16;
    nature: u16;
    attributes: u16;
    capabilities: u16;
    driver_type: char[16];
    tty_name: char[32];
    unit: u16;
    open_count: u16;
    pgrp: pid;
    padd: u16;
    session: pid;
    padd: u16;
    flags: u16;
    major: u16;
}

msg dev_info {
     type: 0x31b;
     request {
          fd: fd;
     }
     reply {
          status: u16;
          info: dev_info;
     }
}

msg dev_fdinfo {
     type: 0x320;
     request {
          fd: fd;
          pid: pid;
          padd: u16;
     }
     reply {
          status: u16;
          info: dev_info;
     }
}

msg term_size {
     type: 0x0323;
     request {
          fd: fd;
          rows: u16;
          cols: u16;
     }
     reply {
          status: u16;
          oldrows: u16;
          oldcols: u16;
          
          padd: u32;
          padd: u32;
          padd: u32;
          padd: u32;
     }
}

msg tcdrain {
     type: 0x0313;

     request {
          fd: fd;
     }
     reply {
          status: u16;
     }
}

msg tcflush {
     type: 0x0314;

     request {
          fd: fd;
          queue: u16;
     }
     reply {
          status: u16;
     }
}

msg read {
     type: 0x031E;
     request {
          fd: fd;
          nbytes: i16;
          minimum: u16;
          time: u16;
          timeout: u16;
          proxy: pid;
          proxy_spare: u16;
          zero: u16;
     }

     reply {
          status: u16;
          nbytes: i16;
          timeout: u16;
          empty: u16;
          # data follows
     }
}

msg insert_chars {
     type: 0x0318;
     request {
          fd: fd;
          nbytes: i16;
     }
     reply {
          status: u16;
     }
}

msg mode {
     type: 0x0319;
     request {
          fd: fd;
          mode: u16;
          mask: u16;
          zero1: u16;
          zero2: u16;
     }
     reply {
          status: u16;
          oldmode: u16;
          zero1: u16;
          zero2: u16;
     }
}
