include common : open;

struct segment_request {
    type: u16;
    subtype: u16;

    sel: u16;
    srcpid: pid;
    padd_1: u16;
    dstpid: pid;
    padd_2: u16;
    flags: u16 hex;
    padd_3: u16;
    addr: u32 hex;
    nbytes: u32 hex;
}

struct segment_reply {
    status: u16;
    sel: u16;
    flags: u16 hex;
    addr: u32 hex;
    nbytes: u32 hex;
}

msg segment_alloc {
    type: 9;
    subtype: 1;

    request segment_request;
    reply segment_reply;
}

msg segment_realloc {
    type: 9;
    subtype: 3;

    request segment_request;
    reply segment_reply;
}

msg time {
    type: 14;
    request {
        padd: u16;
        seconds: u32;
        nsec: u32;
    }
    reply {
        status: u16;
        padd: u16;
        seconds: u32;
        nsec: u32;
    }
}


msg terminate {
    type: 24;

    request {
        signum: u16;
        status: u32;
    }

    reply {}
}

msg open {
    # Seems to match _io_open, used also for reply and maybe other commds
    type: 25;
    
    request open;
    reply open;
}

struct fd_request {
    type: u16 hex;
    subtype: u16 hex;
    fd: fd;
    owner_pid: pid;
    zero1: u16;
    nid: nid;
    pid: pid;
    zero2: u16;
    vid: pid;
    zero3: u16;
    flags: u16;
    handle: u16;
    zero4: u16;
}

struct fd_reply1 {
    status: u16;
    fd: fd;
    padd: u16;
    padd: u16;
}

msg fd_attach {
    type: 22;
    subtype: 0;

    request fd_request;
    reply fd_reply1;
}

msg fd_detach {
    type: 22;
    subtype: 1;

    request fd_request;
    reply fd_reply1;
}

msg vc_detach {
    type: 32;
    request {}
    reply {
        status: u16;
    }
}

msg psinfo {
    type: 34;
    request {
        pid: pid;
        padd: u16;
        memindex: u16;
    }
    reply {
        status: u16;
        # psinfo follows
        # 16 segs follow
    }
}

struct signal_request {
    type: u16;
    subtype: u16;

    signum: u16;
    pid: pid;
    padd: u16;
    mask: u32 hex;
    bits: u32 hex;
    offset: u32 hex;
    segment: u16 hex;
}

struct signal_reply {
    status: u16;
    padd: u16;
    old_bits: u32 hex;
    new_bits: u32 hex;
}

msg sigtab {
    type: 8;
    subtype: 0;
    request signal_request;
    reply signal_reply;
}

# sigaction subtype 1 deprecated

msg sigmask {
    type: 8;
    subtype: 2;
    request signal_request;
    reply signal_reply;
}

msg sigraise {
    type: 8;
    subtype: 3;
    request signal_request;
    reply signal_reply;
}

msg sigpending {
    type: 8;
    subtype: 4;
    request signal_request;
    reply signal_reply;
}

msg sigact {
    type: 8;
    subtype: 5;
    request signal_request;
    reply signal_reply;
}

msg sigsuspend {
    type: 8;
    subtype: 6;
    request signal_request;
    reply signal_reply;
}